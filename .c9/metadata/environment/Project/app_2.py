{"filter":false,"title":"app_2.py","tooltip":"/Project/app_2.py","undoManager":{"mark":24,"position":24,"stack":[[{"start":{"row":0,"column":0},"end":{"row":387,"column":34},"action":"remove","lines":["from flask import Flask, render_template, request, jsonify, send_file, redirect, url_for","from werkzeug.utils import secure_filename","from datetime import datetime","from flask_socketio import SocketIO","import os","import flask","import boto3","import csv","","from m_config import S3_BUCKET, S3_ACCESS_KEY, S3_SECRET_ACCESS_KEY, S3_BUCKET_REGION","import uuid","import pymysql","","app = Flask(__name__, template_folder='template')","socketio = SocketIO(app)","@app.route('/')","def index():","    return render_template('index.html')","","# @app.route('/photo')","# def photo():","#     return render_template('page1.html')","","@app.route('/loading')","def loading():","    return render_template('page6.html')","    ","@app.route('/loading_end')","def loading_end():","    return render_template('page6_2.html')","","@app.route('/check_result_file', methods=['GET'])","result_directory = '/home/ubuntu/environment/efs/crawling_csv'","def check_result_file():","    # 결과 파일이 생성되었는지 확인하는 로직","    result_file_exists = os.path.exists(result_directory, '/*.csv')","    ","    # 결과를 JSON 형태로 반환","    return jsonify({'resultFileExists': result_file_exists})","","def watch_directory():","    # inotify 객체 생성","    inotify = INotify()","","    # 디렉터리 감시 설정","    wd = inotify.add_watch(result_directory, flags.CREATE)","","    # 디렉터리 감시 루프","    for event in inotify.read():","        for flag in flags.from_mask(event.mask):","            if flag == flags.CREATE:","                # print('New file created in the directory.')","    ","# @app.route('/upload2')","# def upload2():","#     return render_template('page7.html', image_url=request.args.get('upload2_url'))","","","@app.route('/result')","def result():","    s3 = boto3.client(service_name=\"s3\",","                        region_name=S3_BUCKET_REGION,","                        aws_access_key_id=S3_ACCESS_KEY,","                        aws_secret_access_key=S3_SECRET_ACCESS_KEY)","","    key = \"2.jpeg\"  # key 생성","    # key = f\"{image_number}.jpeg\"","","    url = s3.generate_presigned_url(","        'get_object',","        Params={'Bucket': \"meorang-resized\", 'Key': key},","        ExpiresIn=3600  # URL's expiration time in seconds","    )","    ","    return render_template('page4.html', image_url=url)","","","","# Global variable to keep track of the current number","current_number = 1","","@app.route('/upload', methods=['POST'])","def upload():","    global current_number  # Access the global variable","    file = request.files['file']","    if file:","        # Generate the unique filename using number, timestamp, and original filename","        timestamp = datetime.now().strftime(\"%Y%m%d%H%M%S%f\")  # Add timestamp to ensure uniqueness","        filename = secure_filename(file.filename)  # Get the original filename","        number = 1  # Replace with the desired number","        extension = os.path.splitext(filename)[1]","        ","        filename_without_extension = os.path.splitext(filename)[0]  # Get the filename without extension","        unique_filename = f\"{current_number}_{timestamp}_{filename_without_extension}{extension}\"  # Format: number_timestamp_filename.extension","        ","        # Save the file to the desired directory","        file.save('/home/ubuntu/environment/efs/coai-original-images/' + unique_filename)","        ","        # Increment the current number for the next upload","        current_number += 1","","        # Generate the URL for the uploaded image","        url = '/coai-original-images/' + unique_filename","        ","        s3 = boto3.client(service_name=\"s3\",","                          region_name=S3_BUCKET_REGION,","                          aws_access_key_id=S3_ACCESS_KEY,","                          aws_secret_access_key=S3_SECRET_ACCESS_KEY)","        ","        load_url = s3.generate_presigned_url(","            'get_object',","            Params={'Bucket': S3_BUCKET, 'Key': unique_filename},","            ExpiresIn=3600  # URL's expiration time in seconds","        )","    ","        return render_template('page6.html', image_url=load_url)","    else:","        return '업로드할 파일을 선택하세요.'","","","###############################################################","###############################################################","","# 분석 후 사용자 선택페이지로 이동","@app.route('/check_user_rin/<filename>')","def check_user_rin(filename):","    folder_path = 'static/images/mojji-output-img'  # Changed directory","    new_directory = os.path.splitext(filename)[0]  # Use the uploaded filename to create the new directory","    new_directory_path = os.path.join(folder_path, new_directory)","    image_names = []","","    for root, dirs, files in os.walk(new_directory_path):","        for file in files:","            if file.endswith('.png'):","                image_path = os.path.join(root, file)","                relative_path = image_path.replace(folder_path, \"\")","                image_names.append(relative_path.lstrip('/'))","","    return render_template('page50.html', image_names=image_names)","    ","    ","    ","    ","###############################################################","###############################################################","# @app.route('/check_user')","# def check_user():","#     folder_path = 'static/images/mojji-output-img'  # 변경된 경로","#     new_directory = max(os.listdir(folder_path))","#     new_directory_path = os.path.join(folder_path, new_directory)","#     image_names = []","","#     for root, dirs, files in os.walk(new_directory_path):","#         for file in files:","#             if file.endswith('.png'):","#                 image_path = os.path.join(root, file)","#                 relative_path = image_path.replace(folder_path, \"\")","#                 image_names.append(relative_path.lstrip('/'))","","#     return render_template('page5.html', image_names=image_names)","","","#################################################################","################################################################","@app.route('/check_user')","def check_user():","    folder_path = 'static/images/mojji-output-img'  # 변경된 경로","    new_directory = request.args.get('directory')  # 새로운 디렉토리 이름 가져오기","    new_directory_path = os.path.join(folder_path, new_directory)","    image_names = []","","    for root, dirs, files in os.walk(new_directory_path):","        for file in files:","            if file.endswith('.png'):","                image_path = os.path.join(root, file)","                relative_path = image_path.replace(folder_path, \"\")","                image_names.append(relative_path.lstrip('/'))","","    return render_template('page5.html', image_names=image_names)","","","","","","","###############################################################","###############################################################","","# from urllib.parse import unquote","","# @app.route('/save-csv', methods=['POST'])","# def save_csv():","#     data = request.get_json()","#     encoded_uri = data.get('data')","","#     directory = '/home/ubuntu/environment/efs/crawling_csv'  # Replace with the desired directory path on your EC2 instance","","#     if not os.path.exists(directory):","#         os.makedirs(directory)","","#     csv_path = os.path.join(directory, 'data.csv')","#     with open(csv_path, 'w', newline='') as file:","#         writer = csv.writer(file)","#         decoded_uri = unquote(encoded_uri)  # Decode the URI-encoded values","#         rows = decoded_uri.splitlines()  # Split the decoded URI into rows","#         rows = [row.replace('data:text/csv;charset=utf-8,', '') for row in rows]  # Remove the prefix","#         for row in rows:","#             values = row.split(',')  # Split each row by the comma character","#             writer.writerow(values)  # Write the values to the CSV file","","#     return redirect('result')","###############################################################","###############################################################","from urllib.parse import unquote","","@app.route('/save-csv-new', methods=['POST'])","def save_csv():","    data = request.get_json()","    encoded_uri = data.get('data')","","    directory = '/home/ubuntu/environment/efs/crawling_csv'  # Replace with the desired directory path on your EC2 instance","","    if not os.path.exists(directory):","        os.makedirs(directory)","","    csv_counter_path = os.path.join(directory, 'csv_counter.txt')","    csv_counter = get_csv_counter(csv_counter_path)","    csv_path = os.path.join(directory, f'data_{csv_counter}.csv')","","    with open(csv_path, 'w', newline='') as file:","        writer = csv.writer(file)","        decoded_uri = unquote(encoded_uri)  # Decode the URI-encoded values","        rows = decoded_uri.splitlines()  # Split the decoded URI into rows","        rows = [row.replace('data:text/csv;charset=utf-8,', '') for row in rows]  # Remove the prefix","        for row in rows:","            values = row.split(',')  # Split each row by the comma character","            writer.writerow(values)  # Write the values to the CSV file","","    increment_csv_counter(csv_counter_path)","","    return redirect('result')","","def get_csv_counter(csv_counter_path):","    if not os.path.exists(csv_counter_path):","        with open(csv_counter_path, 'w') as file:","            file.write('1')","        return 1","","    with open(csv_counter_path, 'r+') as file:","        counter = int(file.read())","        # file.seek(0)","        # file.write(str(counter + 1))","        return counter","","def increment_csv_counter(csv_counter_path):","    with open(csv_counter_path, 'r+') as file:","        counter = int(file.read())","        file.seek(0)","        file.write(str(counter + 1))","","","###############################################################","###############################################################","","# 외 않되?","# @app.route('/save-csv', methods=['POST'])","# def save_csv():","#     try:","#         data = request.get_json()","#         encoded_uri = data.get('data')","","#         directory = '/home/ubuntu/environment/efs/crawling_csv'  # Replace with the desired directory path on your EC2 instance","","#         if not os.path.exists(directory):","#             os.makedirs(directory)","","#         timestamp = datetime.datetime.now().strftime(\"%Y%m%d%H%M%S%f\")  # Add timestamp to ensure uniqueness","#         file = request.files['file']","#         filename = secure_filename(file.filename)  # Get the original filename","#         extension = os.path.splitext(filename)[1]","#         filename_without_extension = os.path.splitext(filename)[0]  # Get the filename without extension","#         unique_filename = f\"{timestamp}_{filename_without_extension}{extension}\"  # Format: timestamp_filename.extension","#         csv_path = os.path.join(directory, unique_filename)","","#         decoded_uri = unquote(encoded_uri)  # Decode the URI-encoded values","#         rows = decoded_uri.splitlines()  # Split the decoded URI into rows","#         rows = [row.replace('data:text/csv;charset=utf-8,', '') for row in rows]  # Remove the prefix","","#         with open(csv_path, 'w', newline='', encoding='utf-8') as file:","#             writer = csv.writer(file)","#             for row in rows:","#                 values = row.split(',')  # Split each row by the comma character","#                 writer.writerow(values)  # Write the values to the CSV file","","#         return redirect('result')","","if __name__ == '__main__':","    # 디렉터리 감시를 백그라운드에서 실행","    import threading","    watch_thread = threading.Thread(target=watch_directory)","    watch_thread.start()","    ","    app.run(host='0.0.0.0', port=5001, debug=True)","","","","#################","#################","# from flask import Flask, render_template, request, jsonify, send_file, redirect, url_for","# from werkzeug.utils import secure_filename","# from datetime import datetime","","# import os","# import flask","# import boto3","# import csv","","# from m_config import S3_BUCKET, S3_ACCESS_KEY, S3_SECRET_ACCESS_KEY, S3_BUCKET_REGION","# import uuid","# import pymysql","# from flask import Flask, render_template, request","# from werkzeug.utils import secure_filename","# from PIL import Image, ImageFile","# from rembg.bg import remove as remove_bg","# import os","# import boto3","# from datetime import datetime","","# app = Flask(__name__, template_folder='template')","","# # Configure your S3 bucket information","# S3_BUCKET = 'your-bucket-name'","# S3_ACCESS_KEY = 'your-access-key'","# S3_SECRET_ACCESS_KEY = 'your-secret-access-key'","# S3_BUCKET_REGION = 'your-bucket-region'","","# # Set the upload directory and create it if it doesn't exist","# UPLOAD_DIRECTORY = '/home/ubuntu/environment/efs/coai-original-images'","# if not os.path.exists(UPLOAD_DIRECTORY):","#     os.makedirs(UPLOAD_DIRECTORY)","","# # Enable truncated image loading","# ImageFile.LOAD_TRUNCATED_IMAGES = True","","# @app.route('/upload', methods=['POST'])","# def upload():","#     # Get the file from the request","#     file = request.files['file']","","#     if file:","#         # Generate a unique filename using number, timestamp, and original filename","#         timestamp = datetime.now().strftime(\"%Y%m%d%H%M%S%f\")","#         filename = secure_filename(file.filename)","#         number = 1  # Replace with the desired number","#         extension = os.path.splitext(filename)[1]","#         unique_filename = f\"{number}_{timestamp}_{filename}\"","","#         # Save the file to the upload directory","#         file.save(os.path.join(UPLOAD_DIRECTORY, unique_filename))","","#         # Process the image and save the resulting image in the remove-bg directory","#         image_path = os.path.join(UPLOAD_DIRECTORY, unique_filename)","#         result_path = os.path.join('/home/ubuntu/environment/efs/coai-remove-bg', unique_filename)","","#         # Perform background removal","#         img = Image.open(image_path)","#         result = remove_bg(img)","#         result.save(result_path)","","#         # Upload the resulting image to the S3 bucket","#         s3 = boto3.client(","#             service_name=\"s3\",","#             region_name=S3_BUCKET_REGION,","#             aws_access_key_id=S3_ACCESS_KEY,","#             aws_secret_access_key=S3_SECRET_ACCESS_KEY","#         )","#         s3.upload_file(result_path, S3_BUCKET, unique_filename)","","#         # Generate the URL for the uploaded image","#         url = s3.generate_presigned_url(","#             'get_object',","#             Params={'Bucket': S3_BUCKET, 'Key': unique_filename},","#             ExpiresIn=3600  # URL's expiration time in seconds","#         )","","#         return render_template('page6.html', image_url=url)","#     else:","#         return '업로드할 파일을 선택하세요.'"],"id":1},{"start":{"row":0,"column":0},"end":{"row":214,"column":50},"action":"insert","lines":["from flask import Flask, render_template, request, jsonify, send_file, redirect, url_for","from werkzeug.utils import secure_filename","from datetime import datetime","","import os","import flask","import boto3","import csv","import glob","import urllib.parse","","from m_config import S3_BUCKET, S3_ACCESS_KEY, S3_SECRET_ACCESS_KEY, S3_BUCKET_REGION","import pymysql","","app = Flask(__name__, template_folder='template')","","@app.route('/')","def index():","    return render_template('index.html')","","# @app.route('/photo')","# def photo():","#     return render_template('page1.html')","","@app.route('/loading')","def loading():","    return render_template('page6.html')","    ","########################################################################################","########################################################################################","","# 이미지 URL들을 담을 리스트 변수","image_urls = []","","","@app.route('/result')","def result():","    # Get the value of identifier from the query parameters","    # identifier = request.args.get('identifier', '')","    ","    s3 = boto3.client(","        service_name=\"s3\",","        region_name=S3_BUCKET_REGION,","        aws_access_key_id=S3_ACCESS_KEY,","        aws_secret_access_key=S3_SECRET_ACCESS_KEY","    )","","    image_urls.clear()  # 기존 데이터를 모두 지우고 새로 읽어옴","","    # 식별자 예시","    #### 식별자 어떻게 받을지,,","    identifier = '4_20230718182949142448_3333'","","    get_images_from_s3(s3, \"musinsa-codishop-bucket\", identifier)","","    return render_template('page4.html', image_urls=image_urls)","","def get_images_from_s3(s3_client, bucket_name, identifier):","    # S3 버킷에서 디렉터리 목록을 가져오기","    response = s3_client.list_objects_v2(Bucket=bucket_name, Prefix=\"result_codi/\")","","    # 해당 디렉터리 안에 있는 파일들 중에서 식별자를 포함하는 파일들의 이미지 URL들을 생성","    if 'Contents' in response:","        for obj in response['Contents']:","            image_key = obj['Key']","            if identifier in image_key:","                url = s3_client.generate_presigned_url(","                    'get_object',","                    Params={'Bucket': bucket_name, 'Key': image_key},","                    ExpiresIn=3600  # URL의 만료 시간 (예: 3600초 = 1시간)","                )","                image_urls.append(url)","","########################################################################################","########################################################################################","","# Global variable to keep track of the current number","current_number = 1","","@app.route('/upload', methods=['POST'])","def upload():","    global current_number  # Access the global variable","    file = request.files['file']","    if file:","        # Generate the unique filename using number, timestamp, and original filename","        timestamp = datetime.now().strftime(\"%Y%m%d%H%M%S%f\")  # Add timestamp to ensure uniqueness","        filename = secure_filename(file.filename)  # Get the original filename","        number = 1  # Replace with the desired number","        extension = os.path.splitext(filename)[1]","        ","        filename_without_extension = os.path.splitext(filename)[0]  # Get the filename without extension","        unique_filename = f\"{current_number}_{timestamp}_{filename_without_extension}{extension}\"  # Format: number_timestamp_filename.extension","        ","        # Save the file to the desired directory","        file.save('/home/ubuntu/environment/efs/coai-original-images/' + unique_filename)","        ","        # Increment the current number for the next upload","        current_number += 1","","        # Generate the URL for the uploaded image","        url = '/coai-original-images/' + unique_filename","        ","        s3 = boto3.client(service_name=\"s3\",","                          region_name=S3_BUCKET_REGION,","                          aws_access_key_id=S3_ACCESS_KEY,","                          aws_secret_access_key=S3_SECRET_ACCESS_KEY)","        ","        load_url = s3.generate_presigned_url(","            'get_object',","            Params={'Bucket': S3_BUCKET, 'Key': unique_filename},","            ExpiresIn=3600  # URL's expiration time in seconds","        )","    ","        return redirect(url_for('get_direc_name', identifier=unique_filename, image_url=load_url))","    else:","        return '업로드할 파일을 선택하세요.'","","","###############################################################","###############################################################","","# 분석 후 사용자 선택페이지","def find_directory_with_prefix(directory_path, prefix):","    for dir_name in os.listdir(directory_path):","        # Check if the directory name starts with the given prefix","        if dir_name.startswith(prefix):","            return dir_name","    return None","","@app.route('/check_user', methods=['GET'])","def check_user():","    # Get the value of identifier from the query parameters","    identifier = request.args.get('identifier', '')","","    # Find the directory with the 'after_detection_' prefix","    prefix = \"after_detection_\"","    directory_with_prefix = find_directory_with_prefix('/home/ubuntu/environment/efs/mojji-output-img/', prefix)","","    if directory_with_prefix is None:","        # If the directory with the prefix is not found, handle the error","        return \"Directory with prefix '{}' not found.\".format(prefix)","","    # Construct the full identifier with the directory name","    full_identifier = os.path.join('/home/ubuntu/environment/efs/mojji-output-img/', directory_with_prefix)","","    # Append the identifier to the URL","    url_with_identifier = \"/check_user?identifier=\" + identifier","","    image_names = []  # List to store the image names","    ","    # Iterate over the files in the directory","    for file_name in os.listdir(full_identifier):","        if file_name.endswith('.jpg') or file_name.endswith('.png'):","            image_names.append(file_name)","    ","    return render_template('page5.html', image_names=image_names, directory_path=full_identifier, identifier=url_with_identifier)","","########################################################################################","########################################################################################","","@app.route('/get_direc_name')","def get_direc_name():","    # Get the value of identifier from the query parameters","    identifier = request.args.get('identifier', '')","    url = '/coai-original-images/' + identifier","","    s3 = boto3.client(service_name=\"s3\",","                      region_name=S3_BUCKET_REGION,","                      aws_access_key_id=S3_ACCESS_KEY,","                      aws_secret_access_key=S3_SECRET_ACCESS_KEY)","","    load_url = s3.generate_presigned_url(","        'get_object',","        Params={'Bucket': S3_BUCKET, 'Key': identifier},","        ExpiresIn=3600  # URL's expiration time in seconds","    )","","    return render_template('page6.html', directory=url, image_url=load_url)","","########################################################################################","########################################################################################","","import csv","from urllib.parse import unquote","","@app.route('/save-csv-new', methods=['POST'])","def save_csv():","    identifier = request.args.get('identifier', '')","    data = request.get_json()","    encoded_uri = data.get('data')","","    directory = '/home/ubuntu/environment/efs/crawling_csv'  # Replace with the desired directory path on your EC2 instance","","    if not os.path.exists(directory):","        os.makedirs(directory)","","    # Use the `identifier` to generate the CSV filename with the .csv extension","    csv_filename = f\"{identifier}.csv\"","    csv_path = os.path.join(directory, csv_filename)","","    with open(csv_path, 'w', newline='') as file:","        writer = csv.writer(file)","        decoded_uri = unquote(encoded_uri)  # Decode the URI-encoded values","        rows = decoded_uri.splitlines()  # Split the decoded URI into rows","        rows = [row.replace('data:text/csv;charset=utf-8,', '') for row in rows]  # Remove the prefix","        for row in rows:","            values = row.split(',')  # Split each row by the comma character","            writer.writerow(values)  # Write the values to the CSV file","","    return redirect('result')","","","","if __name__ == '__main__':","    app.run(host='0.0.0.0', port=5001, debug=True)"]}],[{"start":{"row":39,"column":0},"end":{"row":39,"column":4},"action":"remove","lines":["    "],"id":2}],[{"start":{"row":39,"column":0},"end":{"row":40,"column":46},"action":"insert","lines":["    # 세션으로부터 identifier 값을 가져옴","    identifier = session.get('identifier', '')"],"id":3}],[{"start":{"row":40,"column":46},"end":{"row":41,"column":0},"action":"insert","lines":["",""],"id":4},{"start":{"row":41,"column":0},"end":{"row":41,"column":4},"action":"insert","lines":["    "]}],[{"start":{"row":57,"column":62},"end":{"row":57,"column":85},"action":"insert","lines":[", identifier=identifier"],"id":5}],[{"start":{"row":0,"column":88},"end":{"row":0,"column":89},"action":"insert","lines":[","],"id":6}],[{"start":{"row":0,"column":89},"end":{"row":0,"column":90},"action":"insert","lines":[" "],"id":7}],[{"start":{"row":0,"column":90},"end":{"row":0,"column":97},"action":"insert","lines":["session"],"id":8}],[{"start":{"row":0,"column":97},"end":{"row":1,"column":0},"action":"insert","lines":["",""],"id":9}],[{"start":{"row":1,"column":0},"end":{"row":1,"column":33},"action":"insert","lines":["from flask_session import Session"],"id":10}],[{"start":{"row":1,"column":33},"end":{"row":1,"column":34},"action":"insert","lines":["#"],"id":11},{"start":{"row":1,"column":34},"end":{"row":1,"column":35},"action":"insert","lines":["#"]}],[{"start":{"row":1,"column":33},"end":{"row":1,"column":34},"action":"insert","lines":[" "],"id":12}],[{"start":{"row":0,"column":97},"end":{"row":0,"column":98},"action":"insert","lines":[" "],"id":13},{"start":{"row":0,"column":98},"end":{"row":0,"column":99},"action":"insert","lines":["#"]},{"start":{"row":0,"column":99},"end":{"row":0,"column":100},"action":"insert","lines":["#"]}],[{"start":{"row":15,"column":49},"end":{"row":16,"column":0},"action":"insert","lines":["",""],"id":14},{"start":{"row":16,"column":0},"end":{"row":17,"column":0},"action":"insert","lines":["",""]}],[{"start":{"row":17,"column":0},"end":{"row":20,"column":12},"action":"insert","lines":["# 세션 설정","app.config['SESSION_PERMANENT'] = False","app.config['SESSION_TYPE'] = 'filesystem'","Session(app)"],"id":15}],[{"start":{"row":16,"column":0},"end":{"row":17,"column":0},"action":"insert","lines":["",""],"id":16},{"start":{"row":17,"column":0},"end":{"row":17,"column":1},"action":"insert","lines":["#"]},{"start":{"row":17,"column":1},"end":{"row":17,"column":2},"action":"insert","lines":["#"]}],[{"start":{"row":22,"column":0},"end":{"row":23,"column":0},"action":"insert","lines":["",""],"id":17}],[{"start":{"row":22,"column":0},"end":{"row":22,"column":1},"action":"insert","lines":["#"],"id":18},{"start":{"row":22,"column":1},"end":{"row":22,"column":2},"action":"insert","lines":["#"]}],[{"start":{"row":110,"column":56},"end":{"row":111,"column":0},"action":"insert","lines":["",""],"id":19},{"start":{"row":111,"column":0},"end":{"row":111,"column":8},"action":"insert","lines":["        "]},{"start":{"row":111,"column":8},"end":{"row":112,"column":0},"action":"insert","lines":["",""]},{"start":{"row":112,"column":0},"end":{"row":112,"column":8},"action":"insert","lines":["        "]}],[{"start":{"row":112,"column":4},"end":{"row":112,"column":8},"action":"remove","lines":["    "],"id":20},{"start":{"row":112,"column":0},"end":{"row":112,"column":4},"action":"remove","lines":["    "]}],[{"start":{"row":112,"column":0},"end":{"row":113,"column":47},"action":"insert","lines":["        # 세션에 identifier 저장","        session['identifier'] = unique_filename"],"id":21}],[{"start":{"row":111,"column":8},"end":{"row":112,"column":0},"action":"insert","lines":["",""],"id":22},{"start":{"row":112,"column":0},"end":{"row":112,"column":8},"action":"insert","lines":["        "]},{"start":{"row":112,"column":8},"end":{"row":112,"column":9},"action":"insert","lines":["#"]},{"start":{"row":112,"column":9},"end":{"row":112,"column":10},"action":"insert","lines":["#"]}],[{"start":{"row":115,"column":8},"end":{"row":116,"column":0},"action":"insert","lines":["",""],"id":23},{"start":{"row":116,"column":0},"end":{"row":116,"column":8},"action":"insert","lines":["        "]}],[{"start":{"row":115,"column":8},"end":{"row":115,"column":9},"action":"insert","lines":["#"],"id":24},{"start":{"row":115,"column":9},"end":{"row":115,"column":10},"action":"insert","lines":["#"]}],[{"start":{"row":61,"column":4},"end":{"row":61,"column":6},"action":"insert","lines":["# "],"id":25}]]},"ace":{"folds":[],"scrolltop":470.5,"scrollleft":0,"selection":{"start":{"row":92,"column":32},"end":{"row":92,"column":32},"isBackwards":false},"options":{"guessTabSize":true,"useWrapMode":false,"wrapToView":true},"firstLineState":{"row":32,"state":"start","mode":"ace/mode/python"}},"timestamp":1689819532732,"hash":"d13c6ffd6fed4b57de7bb52204b271c20e354706"}